@page "/products"

@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="container rounded p-4">
                <div class="input-group rounded-pill">
                    <input type="text" class="form-control custom-search-input border-0" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" placeholder="Search Skills...">
                    <div class="input-group-append">
                        <button @onclick="(e => EnableFilterData())" class="btn btn-outline-primary rounded-pill">Filter</button>
                        <button @onclick="(e => ClearFilterData())" class="btn btn-outline-danger rounded-pill">Clear</button>
                    </div>
                </div>
                <div class="input-group rounded-pill mt-3">
                    <select class="form-control" @onchange="(e) => UpdateAppointmentType(e.Value.ToString())">
                        <option value="All" selected>All Appointments</option>
                        <option value="Virtual">Virtual Appointments</option>
                        <option value="Inperson">Inperson Appointments</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card-columns">
    @{
        try
        {
            var productList = ProductService.GetAllData();

            if (FilterData)
            {
                productList = productList.Where(m =>
                (m.Title.Contains(FilterDataString, StringComparison.OrdinalIgnoreCase) ||
                m.Skills.Contains(FilterDataString, StringComparison.OrdinalIgnoreCase)) &&
                (selectedAppointmentType == "All" || m.Preference == selectedAppointmentType)
                );
            }

            if (productList.Any())
            {
                @foreach (var product in productList)
                {
                    <div class="card">
                        <div class="card-img" style="background-image: url('@product.Image');">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@product.Title</h5>
                            <h6 class="card-title">@product.Skills</h6>
                        </div>
                        <div class="card-footer">
                            <small class="text-muted">
                                <button @onclick="(e => SelectProduct(product.Id))" id="Details_@product.Id"
                                        data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                    Details
                                </button>
                            </small>
                        </div>
                    </div>
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while fetching and rendering products: " + ex.Message);
        }
    }
</div>

@if (selectedProduct == null)
{
    selectedProduct = ProductService.GetAllData().First();
}
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                    </div>
                    <div class="card-body">
                        <p class="card-text">@selectedProduct.Description</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                @if (voteCount == 0)
                {
                    <span>Be the first to vote!</span>
                }
                else
                {
                    <span>@voteCount @voteLabel</span>
                }
                @for (int i = 1; i < 6; i++)
                {
                    var currentStar = i;
                    if (i <= currentRating)
                    {
                        <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                    }
                    else
                    {
                        <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                    }
                }
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string FilterDataString = "";
    bool FilterData = false;
    string selectedAppointmentType = "All"; // Default to "All" to show all appointments

    void SelectProduct(string productId)
    {
        try
        {
            selectedProductId = productId;

            if (string.IsNullOrEmpty(FilterDataString))
            {
                selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
            }
            else
            {
                selectedProduct = ProductService.GetProducts()
                    .FirstOrDefault(x => x.Id == productId && x.Title.Contains(FilterDataString, StringComparison.OrdinalIgnoreCase));
            }

            GetCurrentRating();
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while selecting the product: " + ex.Message);
        }
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;
    bool voted = false;
    void GetCurrentRating()
    {
        try
        {
            if (selectedProduct.Ratings == null)
            {
                currentRating = 0;
                voteCount = 0;
            }
            else
            {
                voteCount = selectedProduct.Ratings.Count();
                voteLabel = voteCount > 1 ? "Votes" : "Vote";
                currentRating = selectedProduct.Ratings.Sum() / voteCount;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while calculating the current rating: " + ex.Message);
        }
    }

    void SubmitRating(int rating)
    {
        try
        {
            if (voted == false)
            {
                ProductService.AddRating(selectedProductId, rating);
                voted = true;
                SelectProduct(selectedProductId);
            }
            else
            {
                voteLabel = "you already voted";   
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while submitting the rating: " + ex.Message);
        }
    }

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
        if (!string.IsNullOrEmpty(text))
        {
            EnableFilterData();
        }
        else
        {
            ClearFilterData();
        }
    }

    void EnableFilterData()
    {
        FilterData = true;
    }

    void ClearFilterData()
    {
        FilterDataString = "";
        FilterData = false;
        SelectProduct(selectedProductId);
    }

    void UpdateAppointmentType(string type)
    {
        selectedAppointmentType = type;
    }
}